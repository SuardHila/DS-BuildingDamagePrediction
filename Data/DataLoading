# Import libraries here
import sqlite3
import warnings
from category_encoders import OrdinalEncoder

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from category_encoders import OneHotEncoder
from IPython.display import VimeoVideo
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.utils.validation import check_is_fitted
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier, plot_tree




%load_ext sql
%sql sqlite:////home/jovyan/nepal.sqlite

SELECT DISTINCT district_id FROM id_map;


SELECT COUNT(*) 
FROM id_map
WHERE district_id = 1;



SELECT COUNT(*) 
FROM id_map
WHERE district_id = 3;


# Build your `wrangle` function here
def wrangle(db_path):
    # Connect to database
    conn = sqlite3.connect(db_path)

    # Construct query
    query = """SELECT DISTINCT I.building_id AS b_id, 
                B.*, 
                D.damage_grade
                FROM id_map AS I
                JOIN building_structure AS B ON B.building_id = I.building_id
                JOIN building_damage AS D ON D.building_id = I.building_id
                WHERE I.district_id = 3   """
            
    df= pd.read_sql(query, conn, index_col="b_id")
    
        # Identify leaky columns
    drop_cols = [col for col in df.columns if "post_eq" in col]

    # Add high-cardinality / redundant column
    drop_cols.append("building_id")
    
    drop_cols.append("damage_grade")

    # Drop multicollinearity column
    drop_cols.append("count_floors_pre_eq")

    df["damage_grade"] = df["damage_grade"].str[-1].astype(int)
    df["severe_damage"] = (df["damage_grade"] > 3).astype(int)
    
    
    df.drop(columns=drop_cols, inplace=True)

    
    return df



df = wrangle("/home/jovyan/nepal.sqlite")

